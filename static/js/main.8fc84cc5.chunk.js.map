{"version":3,"sources":["Helpers/Validators/EmailValidator.js","Helpers/Validators/NameValidator.js","Helpers/Validators/PasswordValidator.js","Helpers/Validators/RequiredFieldsValidator.js","components/LoginPage/validateForm.js","components/LoginPage/index.js","components/UserRegistrationPage/validateForm.js","components/UserRegistrationPage/index.js","components/ForgotPassword/validateForm.js","components/ForgotPassword/index.js","components/HomePage/index.js","components/Footer/index.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["EMAIL_REGEX","emailValidator","email","test","trim","NAME_REGEX","nameValidator","fieldName","fieldValue","length","REGEX_PASSWORD","passwordValidator","password","requiredFieldValidator","validate","value","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","initialValues","SignIn","classes","useState","values","setValues","errors","setErrors","touched","setTouched","handleChange","evt","target","name","newValue","type","handleBlur","rest","error","helperText","Container","component","maxWidth","CssBaseline","className","Avatar","Typography","variant","TextField","required","fullWidth","id","label","autoComplete","onChange","onBlur","autoFocus","Button","color","onClick","preventDefault","formValidation","Object","keys","reduce","acc","key","newError","newTouched","every","t","Grid","container","item","xs","to","Link","href","firstName","lastName","re_password","SignUp","sm","justify","ForgotPassword","root","media","height","HomePage","Card","CardActionArea","CardMedia","image","title","CardContent","gutterBottom","CardActions","size","minHeight","marginBottom","footer","padding","grey","App","exact","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.8fc84cc5.chunk.js","sourcesContent":["const EMAIL_REGEX = /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\r\n\r\nexport const emailValidator = (email) => {\r\n    if (EMAIL_REGEX.test(email)) {\r\n        return null;\r\n    }\r\n    if (email.trim() === '') {\r\n        return 'Email is required';\r\n    }\r\n    return 'Please enter a valid email';\r\n};\r\n","const NAME_REGEX = /[^a-zA-Z -]/;\r\n\r\nexport const nameValidator = (fieldName, fieldValue) => {\r\n    if (fieldValue.trim() === '') {\r\n        return `${fieldName} is required`;\r\n    }\r\n    if (NAME_REGEX.test(fieldValue)) {\r\n        return 'Invalid characters';\r\n    }\r\n    if (fieldValue.trim().length < 3) {\r\n        return `${fieldName} needs to be at least three characters`;\r\n    }\r\n    return null;\r\n};\r\n","const REGEX_PASSWORD = /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{7,15}$/;\r\n\r\nexport const passwordValidator = (password) => {\r\n    if (REGEX_PASSWORD.test(password)) {\r\n        return null;\r\n    }\r\n    if (password.trim() === '') {\r\n        return 'password is required';\r\n    }\r\n    if (password.length < 7) {\r\n        return 'Please enter alteast 7 characters.';\r\n    }\r\n    return 'Password should contain atleast one capital, small letter, number and special character.';\r\n};\r\n","export const requiredFieldValidator = (fieldName, fieldValue) => {\r\n    if (fieldValue.trim() === '') {\r\n        return `${fieldName} is required.`;\r\n    }\r\n    return null;\r\n};","import { requiredFieldValidator } from '../../Helpers/Validators';\r\n\r\nexport const validate = {\r\n    email: value => requiredFieldValidator('Email', value),\r\n    password: value => requiredFieldValidator('Password', value)\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\n// import FormControlLabel from '@material-ui/core/FormControlLabel';\r\n// import Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { validate } from './validateForm';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nconst initialValues = {\r\n  email: '',\r\n  password: '',\r\n};\r\n\r\n\r\nexport default function SignIn() {\r\n  const classes = useStyles();\r\n  const [values, setValues] = useState(initialValues);\r\n\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const [touched, setTouched] = useState({});\r\n\r\n  const handleChange = evt => {\r\n    const { name, value: newValue, type } = evt.target;\r\n\r\n    // keep number fields as numbers\r\n    const value = type === 'number' ? +newValue : newValue;\r\n\r\n    // save field values\r\n    setValues({\r\n      ...values,\r\n      [name]: value\r\n    });\r\n\r\n    // was the field modified\r\n    setTouched({\r\n      ...touched,\r\n      [name]: true\r\n    });\r\n  };\r\n\r\n  const handleBlur = evt => {\r\n    const { name, value } = evt.target;\r\n\r\n    // remove whatever error was there previously\r\n    const { [name]: removedError, ...rest } = errors; // eslint-disable-line\r\n\r\n    // check for a new error\r\n    const error = validate[name](value);\r\n\r\n    // validate the field if the value has been touched\r\n    setErrors({\r\n      ...rest,\r\n      ...(error && { [name]: touched[name] && { error: true, helperText: error } })\r\n    });\r\n  };\r\n\r\n  const handleSubmit = evt => {\r\n    evt.preventDefault();\r\n\r\n    // validate the form\r\n    const formValidation = Object.keys(values).reduce(\r\n      (acc, key) => {\r\n        const newError = validate[key](values[key]);\r\n        const newTouched = { [key]: true };\r\n        return {\r\n          errors: {\r\n            ...acc.errors,\r\n            ...(newError && { [key]: { error: true, helperText: newError } })\r\n          },\r\n          touched: {\r\n            ...acc.touched,\r\n            ...newTouched\r\n          }\r\n        };\r\n      },\r\n      {\r\n        errors: { ...errors },\r\n        touched: { ...touched }\r\n      }\r\n    );\r\n\r\n    setErrors(formValidation.errors);\r\n    setTouched(formValidation.touched);\r\n\r\n    if (\r\n      !Object.values(formValidation.errors).length && // errors object is empty\r\n      Object.values(formValidation.touched).length ===\r\n      Object.values(values).length && // all fields were touched\r\n      Object.values(formValidation.touched).every(t => t === true) // every touched field is true\r\n    ) {\r\n    //   props.register(values);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container component='main' maxWidth='xs'>\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component='h1' variant='h5'>\r\n          Sign in\r\n        </Typography>\r\n        <div className={classes.form}>\r\n          <TextField\r\n            variant='outlined'\r\n            margin='normal'\r\n            required\r\n            fullWidth\r\n            id='email'\r\n            label='Email Address'\r\n            name='email'\r\n            autoComplete='email'\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            autoFocus\r\n            {...errors['email']}\r\n          />\r\n          <TextField\r\n            variant='outlined'\r\n            margin='normal'\r\n            required\r\n            fullWidth\r\n            name='password'\r\n            label='Password'\r\n            type='password'\r\n            id='password'\r\n            autoComplete='current-password'\r\n            value={values.password}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            {...errors['password']}\r\n          />\r\n          {/* <FormControlLabel\r\n            control={<Checkbox value='remember' color='primary' />}\r\n            label='Remember me'\r\n          /> */}\r\n          <Button\r\n            type='submit'\r\n            fullWidth\r\n            variant='contained'\r\n            color='primary'\r\n            onClick={handleSubmit}\r\n            className={classes.submit}\r\n          >\r\n            Sign In\r\n          </Button>\r\n          <Grid container>\r\n            <Grid item xs>\r\n              <RouterLink to='/forgot-password'>\r\n                <Link href='#' variant='body2'>\r\n                  Forgot password?\r\n                </Link>\r\n              </RouterLink>\r\n            </Grid>\r\n            <Grid item>\r\n              <RouterLink to='/signup'>\r\n                <Link href='#' variant='body2'>\r\n                  {\"Don't have an account? Sign Up\"}\r\n                </Link>\r\n              </RouterLink>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n","import {\r\n    emailValidator,\r\n    passwordValidator,\r\n    nameValidator\r\n} from '../../Helpers/Validators';\r\n\r\nexport const validate = {\r\n    email: emailValidator,\r\n    password: passwordValidator,\r\n    firstName: (name) => nameValidator('First Name', name),\r\n    lastName: (name) => nameValidator('Last Name', name),\r\n    re_password: passwordValidator\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { validate } from './validateForm';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nconst initialValues = {\r\n  firstName: '',\r\n  lastName: '',\r\n  email: '',\r\n  password: '',\r\n  re_password: ''\r\n};\r\n\r\nexport default function SignUp() {\r\n  const classes = useStyles();\r\n\r\n  const [values, setValues] = useState(initialValues);\r\n\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const [touched, setTouched] = useState({});\r\n\r\n  const handleChange = evt => {\r\n    const { name, value: newValue, type } = evt.target;\r\n\r\n    // keep number fields as numbers\r\n    const value = type === 'number' ? +newValue : newValue;\r\n\r\n    // save field values\r\n    setValues({\r\n      ...values,\r\n      [name]: value\r\n    });\r\n\r\n    // was the field modified\r\n    setTouched({\r\n      ...touched,\r\n      [name]: true\r\n    });\r\n  };\r\n\r\n  const handleBlur = evt => {\r\n    const { name, value } = evt.target;\r\n\r\n    // remove whatever error was there previously\r\n    const { [name]: removedError, ...rest } = errors; // eslint-disable-line\r\n\r\n    // check for a new error\r\n    const error = validate[name](value);\r\n\r\n    // validate the field if the value has been touched\r\n    setErrors({\r\n      ...rest,\r\n      ...(error && { [name]: touched[name] && { error: true, helperText: error } })\r\n    });\r\n  };\r\n\r\n  const handleSubmit = evt => {\r\n    evt.preventDefault();\r\n\r\n    // validate the form\r\n    const formValidation = Object.keys(values).reduce(\r\n      (acc, key) => {\r\n        const newError = validate[key](values[key]);\r\n        const newTouched = { [key]: true };\r\n        return {\r\n          errors: {\r\n            ...acc.errors,\r\n            ...(newError && { [key]: { error: true, helperText: newError } })\r\n          },\r\n          touched: {\r\n            ...acc.touched,\r\n            ...newTouched\r\n          }\r\n        };\r\n      },\r\n      {\r\n        errors: { ...errors },\r\n        touched: { ...touched }\r\n      }\r\n    );\r\n\r\n    setErrors(formValidation.errors);\r\n    setTouched(formValidation.touched);\r\n\r\n    if (\r\n      !Object.values(formValidation.errors).length && // errors object is empty\r\n      Object.values(formValidation.touched).length ===\r\n      Object.values(values).length && // all fields were touched\r\n      Object.values(formValidation.touched).every(t => t === true) // every touched field is true\r\n    ) {\r\n    //   props.register(values);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container component='main' maxWidth='xs'>\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component='h1' variant='h5'>\r\n          Sign up\r\n        </Typography>\r\n        <div className={classes.form}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                autoComplete='fname'\r\n                name='firstName'\r\n                variant='outlined'\r\n                required\r\n                fullWidth\r\n                id='firstName'\r\n                label='First Name'\r\n                value={values.firstName}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                {...errors['firstName']}\r\n                autoFocus\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                variant='outlined'\r\n                required\r\n                fullWidth\r\n                id='lastName'\r\n                label='Last Name'\r\n                name='lastName'\r\n                autoComplete='lname'\r\n                value={values.lastName}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                {...errors['lastName']}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant='outlined'\r\n                required\r\n                fullWidth\r\n                id='email'\r\n                label='Email Address'\r\n                name='email'\r\n                autoComplete='email'\r\n                value={values.email}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                {...errors['email']}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant='outlined'\r\n                required\r\n                fullWidth\r\n                name='password'\r\n                label='Password'\r\n                type='password'\r\n                id='password'\r\n                autoComplete='current-password'\r\n                value={values.password}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                {...errors['password']}\r\n              />\r\n            </Grid>\r\n            {/* <Grid item xs={12}>\r\n              <TextField\r\n                variant='outlined'\r\n                required\r\n                fullWidth\r\n                name='re_password'\r\n                label='Verify Password'\r\n                type='password'\r\n                id='re_password'\r\n                autoComplete='current-password'\r\n                value={values.re_password}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                {...errors['re_password']}\r\n              />\r\n            </Grid> */}\r\n          </Grid>\r\n          <Button\r\n            type='submit'\r\n            fullWidth\r\n            variant='contained'\r\n            color='primary'\r\n            className={classes.submit}\r\n            onClick={handleSubmit}\r\n          >\r\n            Sign Up\r\n          </Button>\r\n          <Grid container justify='flex-end'>\r\n            <Grid item>\r\n              <RouterLink to='/login'>\r\n                <Link href='#' variant='body2'>\r\n                  Already have an account? Sign in\r\n                </Link>\r\n              </RouterLink>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n","import {\r\n    emailValidator,\r\n    passwordValidator,\r\n    nameValidator\r\n} from '../../Helpers/Validators';\r\n\r\nexport const validate = {\r\n    email: emailValidator,\r\n    password: passwordValidator,\r\n    firstName: (name) => nameValidator('First Name', name),\r\n    lastName: (name) => nameValidator('Last Name', name),\r\n    re_password: passwordValidator\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { validate } from './validateForm';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nconst initialValues = {\r\n  email: '',\r\n  password: '',\r\n  re_password: ''\r\n};\r\n\r\nexport default function ForgotPassword() {\r\n  const classes = useStyles();\r\n  const [values, setValues] = useState(initialValues);\r\n\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const [touched, setTouched] = useState({});\r\n\r\n  const handleChange = evt => {\r\n    const { name, value: newValue, type } = evt.target;\r\n\r\n    // keep number fields as numbers\r\n    const value = type === 'number' ? +newValue : newValue;\r\n\r\n    // save field values\r\n    setValues({\r\n      ...values,\r\n      [name]: value\r\n    });\r\n\r\n    // was the field modified\r\n    setTouched({\r\n      ...touched,\r\n      [name]: true\r\n    });\r\n  };\r\n\r\n  const handleBlur = evt => {\r\n    const { name, value } = evt.target;\r\n\r\n    // remove whatever error was there previously\r\n    const { [name]: removedError, ...rest } = errors; // eslint-disable-line\r\n\r\n    // check for a new error\r\n    const error = validate[name](value);\r\n\r\n    // validate the field if the value has been touched\r\n    setErrors({\r\n      ...rest,\r\n      ...(error && { [name]: touched[name] && { error: true, helperText: error } })\r\n    });\r\n  };\r\n\r\n  const handleSubmit = evt => {\r\n    evt.preventDefault();\r\n\r\n    // validate the form\r\n    const formValidation = Object.keys(values).reduce(\r\n      (acc, key) => {\r\n        const newError = validate[key](values[key]);\r\n        const newTouched = { [key]: true };\r\n        return {\r\n          errors: {\r\n            ...acc.errors,\r\n            ...(newError && { [key]: { error: true, helperText: newError } })\r\n          },\r\n          touched: {\r\n            ...acc.touched,\r\n            ...newTouched\r\n          }\r\n        };\r\n      },\r\n      {\r\n        errors: { ...errors },\r\n        touched: { ...touched }\r\n      }\r\n    );\r\n\r\n    setErrors(formValidation.errors);\r\n    setTouched(formValidation.touched);\r\n\r\n    if (\r\n      !Object.values(formValidation.errors).length && // errors object is empty\r\n      Object.values(formValidation.touched).length ===\r\n      Object.values(values).length && // all fields were touched\r\n      Object.values(formValidation.touched).every(t => t === true) // every touched field is true\r\n    ) {\r\n    //   props.register(values);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container component='main' maxWidth='xs'>\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component='h1' variant='h5'>\r\n          Reset your password\r\n        </Typography>\r\n        <div className={classes.form}>\r\n          <TextField\r\n            variant='outlined'\r\n            margin='normal'\r\n            required\r\n            fullWidth\r\n            id='email'\r\n            label='Verify Email Address'\r\n            name='email'\r\n            autoComplete='email'\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            {...errors['email']}\r\n            autoFocus\r\n          />\r\n          <TextField\r\n            variant='outlined'\r\n            margin='normal'\r\n            required\r\n            fullWidth\r\n            name='password'\r\n            label='New Password'\r\n            type='password'\r\n            id='password'\r\n            autoComplete='current-password'\r\n            value={values.password}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            {...errors['password']}\r\n          />\r\n          <TextField\r\n            variant='outlined'\r\n            margin='normal'\r\n            required\r\n            fullWidth\r\n            name='re_password'\r\n            label='Verify Password'\r\n            type='password'\r\n            id='re_password'\r\n            autoComplete='current-password'\r\n            value={values.re_password}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            {...errors['re_password']}\r\n          />\r\n          <Button\r\n            type='submit'\r\n            fullWidth\r\n            variant='contained'\r\n            color='primary'\r\n            onClick={handleSubmit}\r\n            className={classes.submit}\r\n          >\r\n            Reset Password\r\n          </Button>\r\n          <Grid container>\r\n            <Grid item>\r\n              <RouterLink to='/login'>\r\n                <Link href='#' variant='body2'>\r\n                  Already have an account? Sign in\r\n                </Link>\r\n              </RouterLink>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 345,\r\n  },\r\n  media: {\r\n    height: 140,\r\n  },\r\n});\r\n\r\nexport default function HomePage() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n        <CssBaseline />\r\n      <CardActionArea>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image=\"/static/images/cards/contemplative-reptile.jpg\"\r\n          title=\"Contemplative Reptile\"\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            Lizard\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging\r\n            across all continents except Antarctica\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        <Button size=\"small\" color=\"primary\">\r\n          Share\r\n        </Button>\r\n        <Button size=\"small\" color=\"primary\">\r\n          Learn More\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    minHeight: '100vh',\r\n  },\r\n  main: {\r\n    marginTop: theme.spacing(8),\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  footer: {\r\n    padding: theme.spacing(3, 2),\r\n    marginTop: 'auto',\r\n    backgroundColor:\r\n      theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[800],\r\n  },\r\n}));\r\n\r\nexport default function StickyFooter() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <Container component=\"main\" className={classes.main} maxWidth=\"sm\">\r\n        <Typography variant=\"h2\" component=\"h1\" gutterBottom>\r\n          Sticky footer\r\n        </Typography>\r\n        <Typography variant=\"h5\" component=\"h2\" gutterBottom>\r\n          {'Pin a footer to the bottom of the viewport.'}\r\n          {'The footer will move as the main element of the page grows.'}\r\n        </Typography>\r\n        <Typography variant=\"body1\">Sticky footer placeholder.</Typography>\r\n      </Container>\r\n      <footer className={classes.footer}>\r\n        <Container maxWidth=\"sm\">\r\n          <Typography variant=\"body1\">My sticky footer can be found here.</Typography>\r\n        </Container>\r\n      </footer>\r\n    </div>\r\n  );\r\n}","import React from 'react';\nimport { Route } from \"react-router-dom\";\nimport { LoginPage, UserRegistrationPage, ForgotPasswordPage, HomePage } from './components';\n\nfunction App() {\n  return (\n    <div className=\"\">\n      <Route exact path={[\"/\", \"/login\"]}><LoginPage /></Route>\n      <Route exact path=\"/signup\"><UserRegistrationPage /></Route>\n      <Route exact path=\"/forgot-password\"><ForgotPasswordPage /></Route>\n      <Route exact path=\"/home\"><HomePage /></Route>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}